// declare namespace Console {
//   function log(...args: any): void;
//   function info(...args: any): void;
//   function error(...args: any): void;
// }

// declare const console: typeof Console;

// import sql, { safe, identifier, rest, values, column, json, SQLRequest, SQLRequestTemplate } from './index.esm';
// import * as sqlite3 from './sqlite3';
// import * as postgres from './postgres';

// import sqlite3drv from 'sqlite3';
// import { BasicParameter } from './definitions';

// const q1 = sql`SELECT ${1}`;

// console.log(
//   q1.render(),
//   q1.render(sqlite3),
//   q1.render(postgres)
// );

// const q2 = sql`SELECT ${1n}, ${rest(safe`, `, 1, identifier('2'), () => rest(safe` - `, 4, 1))}, ${new Date()}, ${sql`${new Uint8Array([1, 42, 192])}${() => sql`, ${Date.now()} FROM ${identifier('a_dynamic table_name')}`}`}`;

// console.log(
//   q2,
//   q2.render(sqlite3),
//   q2.render(postgres)
// );

// console.log(
//   rest(safe`, `),
//   identifier('test'),
//   values(
//     [
//       { tile_data: new Uint8Array(1) },
//       { tile_data: new Uint8Array(3), tile_id: '6' }
//     ],
//     'tile_data', 'tile_id'
//   )
// );

// const rows = Object.freeze([
//   { tile_data: new Uint8Array(1) },
//   { tile_data: new Uint8Array(3), tile_id: '6' }
// ]);

// const vals = values(
//   rows,
//   'tile_data', 'tile_id'
// );

// const r = sql`A = ${rest(safe`, `, 1, 2)}, B = ${identifier('test')}, C = ${vals}`;

// console.log(r.render(postgres));

// // // @ts-ignore
// // vals.columns.pop();

// // @ts-ignore
// // rows.push({ tile_data: new Uint8Array(0) });

// console.log(rows, r.render(postgres), r.render(sqlite3));

// const db = new sqlite3drv.Database(':memory:');

// function runOnSQLite(req: SQLRequest | SQLRequestTemplate) {
//   const { sql: query, parameters } = 'sql' in req ? req : req.render(sqlite3);
//   console.info('QUERY "%s",', query.trim(), parameters);
//   return new Promise<{ [key: string]: BasicParameter }[]>((res, rej) =>
//     db.all(query, parameters, (err, rows) => err ? rej(err) : res(rows))
//   );
// }

// runOnSQLite(sql`
// CREATE TABLE IF NOT EXISTS map (
//   zoom_level INTEGER,
//   tile_column INTEGER,
//   tile_row INTEGER,
//   tile_id TEXT,
//   grid_id TEXT
// );
// `).then(console.info, console.error);

// runOnSQLite(sql`SELECT 1, ${2}, ${null} as ${column('t\0e"st')}, ${rest(safe`, `, '4', column('5', '6'))}`)
//   .then(console.info, console.error);

// const r1 = sql`SELECT ${json({ a: 'b', c: 'd' })}`;

// console.log(
//   r1,
//   r1.render(sqlite3),
//   r1.render(postgres)
// );

import { createSql, values, identifier, json, array } from './index';
import * as postgresFormat from './postgres';

const postgresql = createSql(postgresFormat);

const helloWorld = postgresql`SELECT ${'world'} as hello`;

console.log(helloWorld);
// => [
//   'SELECT $0 as hello',
//   [ 'world' ]
// ]

const getAllUsers = postgresql`SELECT * FROM users`;

console.log(getAllUsers);
// => [
//   'SELECT * FROM users',
//   []
// ]

const getUsersRegisteredSinceStartup = postgresql`${getAllUsers} WHERE created_at >= ${Date.now()}`;

console.log(getUsersRegisteredSinceStartup);
// => [
//   'SELECT * FROM users WHERE created_at >= $0',
//   [ 1614615757312 ]
// ]

const insertUser = (user: { name: string, admin: boolean, created_at?: number }) =>
  postgresql`INSERT INTO ${identifier(user.admin ? 'admins' : 'users')} ${values([user], 'name', 'created_at')}`;

console.log(insertUser({ name: 'John', admin: true, created_at: Date.now() }));
// => [
//   'INSERT INTO admins (name, created_at) VALUES ($0, $1)',
//   [ 'John', 1614622333637 ]
// ]

console.log(insertUser({ name: 'Robert', admin: false }));
// => [
//   'INSERT INTO users (name, created_at) VALUES ($0, DEFAULT)',
//   [ 'Robert' ]
// ]

const registerHeartbeat = postgresql`INSERT INTO events (kind, ${identifier('local id')}) VALUES ('heartbeat', ${() => Math.random()})`;

console.log(registerHeartbeat);
// => [
//   "INSERT INTO events (kind, "local id") VALUES ('heartbeat', $0)",
//   [ 0.7188115091575169 ]
// ]

import sqlite3 from 'sqlite3';
import * as sqlite3format from './sqlite3';
import { DEFAULT_DRIVER } from './definitions';

const db = new sqlite3.Database(':memory:');

const sqlite = createSql(sqlite3format);

const obj = { js: 'on' };

const req = sqlite`${helloWorld}, ${[
  // Arrays and JSON not supported natively by SQLite3 - thoses objects will be converted to string
  [json(obj), array([Date.now(), Math.random()])],

  // `sql` instances can be mixed - the configuration from the top level call will be used
  // The parameter id generated by the `json(obj)` above will be reused for the one below
  postgresql`${json(obj)} as ${identifier('the object')}`
]}`;

console.info(req);
// => [
//   'SELECT $0 as hello, $1, $2, $1 as "the object"',
//   [ 'world', '{"js":"on"}', '[1614624006500,0.5470435684213351]' ]
// ]

db.all(...req, (err, rows) => {
  if (err)
    console.error(err);
  else
    console.info(rows);
});
// => [
//   {
//     hello: 'world',
//     '$1': '{"js":"on"}',
//     '$3': '[1614618141703,0.8028824034555948]'
//     'a number': 42,
//   }
// ]

// import { createSql, values, column, identifier, updates, array, json } from './index';
// import * as postgresFormat from './postgres';

// const sql = createSql(postgresFormat);

// let req = sql`
//   select name, age from users
// `;

// console.log(req);

// req = sql`
//   insert into users (
//     name, age
//   ) values (
//     'Murray', 68
//   )

//   returning *
// `;

// console.log(req);

// let search = 'Mur';

// req = sql`
//   select 
//     name, 
//     age 
//   from users
//   where 
//     name like ${ search + '%' }
// `;

// console.log(req);

// req = sql`
//   select 
//     * 
//   from users
//   where age in (${ [68, 75, 23] })
// `;

// console.log(req);

// const user = {
//   name: 'Murray',
//   age: 68
// }

// req = sql`
//   insert into users ${
//     values(user, 'name', 'age')
//   }
// `

// console.log(req);

// const users = [{
//   name: 'Murray',
//   age: 68,
//   garbage: 'ignore'
// }, {
//   name: 'Walter'
// }]

// req = sql`
//   insert into users ${
//     values(users, 'name', 'age')
//   }
// `;

// console.log(req);

// const muray = {
//   id: 1,
//   name: 'Muray'
// }

// req = sql`
//   update users set ${
//     updates(muray, 'name')
//   } where 
//     id = ${ muray.id }
// `

// console.log(req);

// const columns = ['name', 'age']

// req = sql`
//   select ${
//     column(columns)
//   } from users
// `

// console.log(req);

// const table = 'users'

// req = sql`
//   select id from ${identifier(table)}
// `

// console.log(req);

// req = sql`
// insert into types (
//   integers,
//   strings,
//   dates,
//   buffers,
//   multi
// ) values (
//   ${ array([1,2,3,4,5]) },
//   ${ array(['Hello', 'Postgres']) },
//   ${ array([new Date(), new Date(), new Date()]) },
//   ${ array([Buffer.from('Hello'), Buffer.from('Postgres')]) },
//   ${ array([[[1,2],[3,4]],[[5,6],[7,8]]]) },
// )
// `;

// console.log(req);

// const body = { hello: 'postgres' }

// req = sql`
// insert into json (
//   body
// ) values (
//   ${ json(body) }
// )
// returning body
// `

// console.log(req);
