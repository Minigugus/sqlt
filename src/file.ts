import { SQLTemplate } from './request';

const matchAll = String.prototype.matchAll || (function* matchAll(this: string, regexp: RegExp) {
  let match: RegExpExecArray | null;
  while (match = regexp.exec(this))
    yield match;
});

function unindent(str: string) {
  let minIndent = Infinity;
  for (const [, indent] of matchAll.call(str, /^(\s+)\S/gm))
    minIndent = Math.min(minIndent, indent.length);
  if (!isFinite(minIndent))
    return str;
  let lines = [];
  for (const [, content] of matchAll.call(str, new RegExp(`^\\s{0,${minIndent}}(\\s*\\S.*)$`, 'gm'))) {
    const line = content.trimEnd();
    if (line !== '')
      lines.push(line);
  }
  return lines.join('\n');
}

export function renderAsFile(...queries: SQLTemplate[]): string;
export function renderAsFile(header: string | undefined, ...queries: SQLTemplate[]): string;
export function renderAsFile(header?: string | SQLTemplate, ...queries: SQLTemplate[]) {
  if (typeof header !== 'string') {
    if (header)
      queries.unshift(header);
    header = `Generated by SQLt / ${new Date().toUTCString()}${typeof process === 'object' ? ` / Node v${process?.versions?.node}` : ''}`;
  }
  return (
    queries
      .reduce((str, q) => {
        let sql = unindent(q.renderSQL());
        if (!sql.endsWith(';'))
          sql += ';';
        if (sql.length > 1)
          return str + '\n\n' + sql;
        return str;
      }, header.replace(/^/gm, '-- '))
  ).trim();
}
